// Top-level build file where you can add configuration options common to all sub-projects/modules.
println("=" * 50)
println("start build.gradle")
apply from: 'config.gradle'

buildscript {
    println("enter ${project.name} buildscript")

    ext.kotlin_version = "1.7.10"
    ext.lib_asu_version = "0.2.2"
    ext.lib_hook_version = "0.3.5"
    ext.lib_perf_version = "0.3.5"

    ext.use_local_lib = true
    ext.use_local_hook_lib = true
    ext.use_local_epic = useLocalEpic.toBoolean()

    ext.print_module_deps = false

    ext.local_repo_path = rootProject.file("./repos").absolutePath
    println("local repo path:${rootProject.ext.local_repo_path}")

    ext.devName = "XanderWang"
    ext.devEmail = "420640763@qq.com"
    ext.ossUsername = "xxx"
    ext.ossPassword = "xxx"
    try {
        // sonatypeUsername 和 sonatypePassword 在本地的
        ext.ossUsername = sonatypeUsername
        ext.ossPassword = sonatypePassword
    } catch (ignored) {
        ignored.printStackTrace()
    }
    println("ossUsername:${rootProject.ext.ossUsername},ossPassword:${rootProject.ext.ossPassword}")

    repositories {
        maven { url uri("${rootProject.ext.local_repo_path}") }
        maven { url "https://maven.aliyun.com/repository/google" }
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        // jcenter() { url "http://jcenter.bintray.com/" }
        maven { url 'https://repo1.maven.org/maven2/' }
        // central
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/central' }
        // jcenter
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
        // public
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public' }
        //google
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/google' }
        //gradle-plugin
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/gradle-plugin' }
        //apache snapshots
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/apache-snapshots' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${rootProject.ext.kotlin_version}"
    }
}

allprojects {
    println("-" * 100)
    println("enter ${project.name} allprojects")

    repositories {
        maven { url uri("${rootProject.ext.local_repo_path}") }
        maven { url "https://maven.aliyun.com/repository/google" }
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        // jcenter() { url "http://jcenter.bintray.com/" }
        maven { url 'https://repo1.maven.org/maven2/' }
        // central
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/central' }
        // jcenter
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
        // public
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public' }
        //google
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/google' }
        //gradle-plugin
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/gradle-plugin' }
        //apache snapshots
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/apache-snapshots' }
    }

    // add dependency substitution rules
    configurations.all {
        resolutionStrategy.dependencySubstitution {
            // Substitute project and module dependencies
            // 远程的 lib 依赖变成本地的依赖
            if (rootProject.ext.use_local_lib) {
                substitute module('io.github.xanderwang:asu') with project(':a-simple-util')
                substitute module('io.github.xanderwang:performance') with project(':performance')
                substitute module('io.github.xanderwang:performance-noop') with project(':performance-noop')
            }
            if (rootProject.ext.use_local_hook_lib) {
                substitute module('io.github.xanderwang:hook-core') with project(':hook-core')
                substitute module('io.github.xanderwang:hook-epic') with project(':hook-epic')
                substitute module('io.github.xanderwang:hook-sandhook') with project(':hook-sandhook')
                substitute module('io.github.xanderwang:hook') with project(':hook')
            }
            // if (useLocalEpic.toBoolean()) {
            if (rootProject.ext.use_local_epic) {
                substitute module('io.github.xanderwang:epic-xander') with project(':lib-epic')
                substitute module('io.github.xanderwang:exposed-xposedapi-xandeer') with project(':lib-epic-exposed-xposedapi')
            }
            // Substitute one module dependency for another
            // 修改某个依赖的版本
            //substitute module('org.gradle:api:2.0') with module('org.gradle:api:2.1')
        }

        // resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        //     ModuleVersionSelector target = details.target
        //     println "project: ${project.name}, deps: ${target}"
        // }
    }

    println("exit ${project.name} allprojects")
    println("-" * 100)
}

apply from: 'publish.gradle'

task clean(type: Delete) {
    delete rootProject.buildDir
}

println("end build.gradle")
